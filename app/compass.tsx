import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  Animated,
  Alert,
  Platform // 1. Import Platform
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { router, useLocalSearchParams } from 'expo-router';
import { ArrowLeft, Navigation } from 'lucide-react-native';
// 2. Conditionally import expo-sensors only if not on web
const Sensors = Platform.OS !== 'web' ? require('expo-sensors') : undefined;
import { Card } from '@/components/ui/Card';
import { useTheme } from '@/contexts/ThemeContext';
import { useLanguage } from '@/contexts/LanguageContext';
import { Colors, Spacing, Typography } from '@/constants/colors';

export default function CompassScreen() {
  const { optimalAzimuth } = useLocalSearchParams<{ optimalAzimuth: string }>();
  const [currentHeading, setCurrentHeading] = useState(0);
  const [subscription, setSubscription] = useState<any>(null);
  const rotationAnim = new Animated.Value(0);

  const { isDark } = useTheme();
  const { t } = useLanguage();
  const colors = isDark ? Colors.dark : Colors.light;

  // 3. Handle the web case
  if (Platform.OS === 'web') {
    return (
      <SafeAreaView style={{ flex: 1, backgroundColor: colors.background, justifyContent: 'center', alignItems: 'center' }}>
        <View style={{ flexDirection: 'row', alignItems: 'center', position: 'absolute', top: 60, left: 20 }}>
           <TouchableOpacity onPress={() => router.back()}>
             <ArrowLeft size={24} color={colors.text} />
           </TouchableOpacity>
        </View>
        <Text style={{ ...Typography.h2, color: colors.text }}>
          Compass is not available on the web. ðŸ§­
        </Text>
      </SafeAreaView>
    );
  }

  // The rest of your existing component code for iOS and Android goes here...
  const optimalDirection = optimalAzimuth ? parseFloat(optimalAzimuth) : 180;

  useEffect(() => {
    startCompass();
    return () => {
      stopCompass();
    };
  }, []);

  useEffect(() => {
    Animated.timing(rotationAnim, {
      toValue: -currentHeading,
      duration: 200,
      useNativeDriver: true,
    }).start();
  }, [currentHeading]);

  const startCompass = async () => {
    try {
      // The 'Sensors' constant will be defined here because we are not on web
      const { status } = await Sensors.requestPermissionsAsync();
      if (status !== 'granted') {
        Alert.alert('Permission needed', 'Access to sensors is required');
        return;
      }

      const sub = Sensors.Magnetometer.addListener(({ y, x }) => {
        let angle = Math.atan2(y, x) * (180 / Math.PI);
        angle = (angle + 360) % 360;
        setCurrentHeading(angle);
      });

      Sensors.Magnetometer.setUpdateInterval(100);
      setSubscription(sub);
    } catch (error) {
      Alert.alert('Error', 'Could not access the compass');
    }
  };
  
  // ... (the rest of your functions: stopCompass, getDifferenceAngle, etc.)
  // ... (your styles object)
  // ... (your return statement with the JSX for the compass)

  // NOTE: Make sure to include all the remaining functions and the return statement
  // from your original code file below this point. I've omitted them here for brevity.
  const stopCompass = () => {
Â  Â  if (subscription) {
Â  Â  Â  subscription.remove();
Â  Â  Â  setSubscription(null);
Â  Â  }
Â  };

Â  const getDifferenceAngle = () => {
Â  Â  let diff = optimalDirection - currentHeading;
Â  Â  if (diff > 180) diff -= 360;
Â  Â  if (diff < -180) diff += 360;
Â  Â  return Math.abs(diff);
Â  };

Â  const isAligned = () => getDifferenceAngle() < 15;

Â  const getAlignmentColor = () => {
Â  Â  const diff = getDifferenceAngle();
Â  Â  if (diff < 15) return colors.success;
Â  Â  if (diff < 30) return colors.warning;
Â  Â  return colors.error;
Â  };

Â  const styles = StyleSheet.create({
Â  Â  container: {
Â  Â  Â  flex: 1,
Â  Â  Â  backgroundColor: colors.background,
Â  Â  },
Â  Â  header: {
Â  Â  Â  flexDirection: 'row',
Â  Â  Â  alignItems: 'center',
Â  Â  Â  padding: Spacing.lg,
Â  Â  Â  borderBottomWidth: 1,
Â  Â  Â  borderBottomColor: colors.border,
Â  Â  },
Â  Â  backButton: {
Â  Â  Â  marginRight: Spacing.md,
Â  Â  },
Â  Â  title: {
Â  Â  Â  ...Typography.h2,
Â  Â  Â  color: colors.text,
Â  Â  Â  flex: 1,
Â  Â  Â  textAlign: 'center',
Â  Â  },
Â  Â  content: {
Â  Â  Â  flex: 1,
Â  Â  Â  justifyContent: 'center',
Â  Â  Â  alignItems: 'center',
Â  Â  Â  padding: Spacing.lg,
Â  Â  },
Â  Â  compassContainer: {
Â  Â  Â  width: 300,
Â  Â  Â  height: 300,
Â  Â  Â  borderRadius: 150,
Â  Â  Â  borderWidth: 2,
Â  Â  Â  borderColor: colors.border,
Â  Â  Â  backgroundColor: colors.surface,
Â  Â  Â  justifyContent: 'center',
Â  Â  Â  alignItems: 'center',
Â  Â  Â  marginBottom: Spacing.xl,
Â  Â  },
Â  Â  compass: {
Â  Â  Â  width: 280,
Â  Â  Â  height: 280,
Â  Â  Â  borderRadius: 140,
Â  Â  Â  justifyContent: 'center',
Â  Â  Â  alignItems: 'center',
Â  Â  },
Â  Â  northIndicator: {
Â  Â  Â  position: 'absolute',
Â  Â  Â  top: 10,
Â  Â  Â  alignItems: 'center',
Â  Â  },
Â  Â  northText: {
Â  Â  Â  ...Typography.body1,
Â  Â  Â  color: colors.primary,
Â  Â  Â  fontWeight: '700',
Â  Â  },
Â  Â  optimalArrow: {
Â  Â  Â  position: 'absolute',
Â  Â  Â  width: 4,
Â  Â  Â  height: 120,
Â  Â  Â  backgroundColor: colors.primary,
Â  Â  Â  borderRadius: 2,
Â  Â  },
Â  Â  currentArrow: {
Â  Â  Â  position: 'absolute',
Â  Â  Â  alignItems: 'center',
Â  Â  },
Â  Â  infoSection: {
Â  Â  Â  alignItems: 'center',
Â  Â  Â  marginBottom: Spacing.lg,
Â  Â  },
Â  Â  currentHeading: {
Â  Â  Â  ...Typography.h1,
Â  Â  Â  color: colors.text,
Â  Â  Â  marginBottom: Spacing.sm,
Â  Â  },
Â  Â  optimalHeading: {
Â  Â  Â  ...Typography.h2,
Â  Â  Â  color: colors.primary,
Â  Â  Â  marginBottom: Spacing.sm,
Â  Â  },
Â  Â  alignmentStatus: {
Â  Â  Â  ...Typography.body1,
Â  Â  Â  fontWeight: '600',
Â  Â  Â  marginBottom: Spacing.sm,
Â  Â  },
Â  Â  difference: {
Â  Â  Â  ...Typography.body2,
Â  Â  Â  color: colors.textSecondary,
Â  Â  },
Â  });

Â  const optimalArrowRotation = optimalDirection;

Â  return (
Â  Â  <SafeAreaView style={styles.container}>
Â  Â  Â  <View style={styles.header}>
Â  Â  Â  Â  <TouchableOpacity
Â  Â  Â  Â  Â  style={styles.backButton}
Â  Â  Â  Â  Â  onPress={() => router.back()}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  <ArrowLeft size={24} color={colors.text} />
Â  Â  Â  Â  </TouchableOpacity>
Â  Â  Â  Â  <Text style={styles.title}>BÃºssola Solar</Text>
Â  Â  Â  </View>

Â  Â  Â  <View style={styles.content}>
Â  Â  Â  Â  <Card style={styles.compassContainer}>
Â  Â  Â  Â  Â  <Animated.View
Â  Â  Â  Â  Â  Â  style={[
Â  Â  Â  Â  Â  Â  Â  styles.compass,
Â  Â  Â  Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  Â  Â  transform: [{ rotate: `${-currentHeading}deg` }],
Â  Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  ]}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <View style={styles.northIndicator}>
Â  Â  Â  Â  Â  Â  Â  <Text style={styles.northText}>N</Text>
Â  Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  Â  Â  <View
Â  Â  Â  Â  Â  Â  Â  style={[
Â  Â  Â  Â  Â  Â  Â  Â  styles.optimalArrow,
Â  Â  Â  Â  Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  Â  Â  Â  transform: [{ rotate: `${optimalArrowRotation}deg` }],
Â  Â  Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  Â  ]}
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  <View style={styles.currentArrow}>
Â  Â  Â  Â  Â  Â  Â  <Navigation size={32} color={getAlignmentColor()} />
Â  Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  Â  </Animated.View>
Â  Â  Â  Â  </Card>

Â  Â  Â  Â  <View style={styles.infoSection}>
Â  Â  Â  Â  Â  <Text style={styles.currentHeading}>
Â  Â  Â  Â  Â  Â  {currentHeading.toFixed(0)}Â°
Â  Â  Â  Â  Â  </Text>
Â  Â  Â  Â  Â  <Text style={styles.optimalHeading}>
Â  Â  Â  Â  Â  Â  Ã“timo: {optimalDirection.toFixed(0)}Â°
Â  Â  Â  Â  Â  </Text>
Â  Â  Â  Â  Â  <Text style={[styles.alignmentStatus, { color: getAlignmentColor() }]}>
Â  Â  Â  Â  Â  Â  {isAligned() ? 'âœ“ Alinhado!' : 'â†» Continue girando'}
Â  Â  Â  Â  Â  </Text>
Â  Â  Â  Â  Â  <Text style={styles.difference}>
Â  Â  Â  Â  Â  Â  DiferenÃ§a: {getDifferenceAngle().toFixed(0)}Â°
Â  Â  Â  Â  Â  </Text>
Â  Â  Â  Â  </View>
Â  Â  Â  </View>
Â  Â  </SafeAreaView>
Â  );
}